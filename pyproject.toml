################################################################################
# package & virtual env & dependency management (here: poetry)
[tool.poetry]
name = "video2images"
version = "0.1.0"
description = "Converts a video into images filtered for Photogrammetry, such as in Meshroom. "
authors = ["Robert HÃ¼mmer <robert.huem@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
opencv-python = "^4.10.0.84"
scikit-image = "^0.24.0"
numpy = "^2.0.1"
matplotlib = "^3.9.1"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.2"
isort = "^5.13.2"
black = "^24.4.2"
ruff = "^0.5.5"
pyright = "^1.1.374"
mypy = "^1.11.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

################################################################################
# formatter (here: black)
[tool.black]
target-version = ["py38", "py39", "py310", "py311"]
line-length = 80
include = "*.py"
exclude = '''
/(
    \.git
  | \.vscode
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
  | tests
)/
'''

################################################################################
# import sorter (here: isort)

[tool.isort]
profile = "black"
sections = [
    "FUTURE",
    "STDLIB",
    "THIRDPARTY",
    "FIRSTPARTY",
    "LOCALFOLDER"
]
known_first_party = ["bpy", "bpy_extras", "bmesh"]
known_third_party = ["numpy", "mathutils"]

# style:
multi_line_output = 3
lines_after_imports = 2
force_single_line = true
use_parentheses = true
ensure_newline_before_comments = true
line_length = 80
include_trailing_comma = true
skip_glob = [  # files isort should skip over
  "setup.py"
]

################################################################################
# dynamic duck-style checker (here: MyPy)

[tool.mypy]
# imports related
ignore_missing_imports = true
follow_imports = "silent"
# None and Optional handling
no_implicit_optional = false
strict_optional = false
# Configuring warnings
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
warn_return_any = false
# Untyped definitions and calls
check_untyped_defs = false
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
# Disallow dynamic typing
disallow_subclassing_any = false
disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_any_generics = false
# Miscellaneous strictness flags
allow_untyped_globals = true
allow_redefinition = false
local_partial_types = false
implicit_reexport = true
strict_equality = true
# Configuring error messages
show_error_context = false
show_column_numbers = false
show_error_codes = true
exclude = ["examples"]

################################################################################
# LINTER (here: RUFF)

[tool.ruff]
target-version = "py38"
select = ["F", "E"]
# Exclude certain rules that might not be applicable or too strict for bpy
ignore = [
    "E501",  # Line too long (override for long lines in comments or docstrings)
    "F401",  # Module imported but unused (common in bpy scripts)
    "F841",  # Local variable is assigned to but never used (common in bpy scripts)
]
unfixable = []
line-length = 80
extend-exclude = ["tests"]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.isort]
force-single-line = true
force-sort-within-sections = false
lines-after-imports = 2
[tool.ruff.mccabe]
max-complexity = 24
[tool.ruff.pycodestyle]
ignore-overlong-task-comments = true
[tool.ruff.pydocstyle]
convention = "google"

# Add custom rules or overrides specific to bpy
[tool.ruff.flake8-annotations]
allow-star-arg-any = true
ignore-fully-untyped = true

[tool.ruff.flake8-bugbear]
extend-immutable-calls = ["bpy.props"]

[tool.ruff.pylint]
max-branches = 24
max-returns = 12
max-statements = 100
max-args = 15
allow-magic-value-types = ["str", "bytes", "complex", "float", "int"]

################################################################################
# Static Type Checker (here: PyRight); Note: PyRight is used by PyLance!

[tool.pyright]
typeCheckingMode = "basic"

# enable subset of "strict"
reportDuplicateImport = true
reportInvalidStubStatement = true
reportOverlappingOverload = true
reportPropertyTypeMismatch = true
reportUntypedClassDecorator = true
reportUntypedFunctionDecorator = true
reportUntypedNamedTuple = true
reportUnusedImport = true

# disable subset of "basic"
reportGeneralTypeIssues = false
reportMissingModuleSource = false
reportOptionalCall = false
reportOptionalIterable = false
reportOptionalMemberAccess = false
reportOptionalOperand = false
reportOptionalSubscript = false
reportPrivateImportUsage = false
reportUnboundVariable = true
